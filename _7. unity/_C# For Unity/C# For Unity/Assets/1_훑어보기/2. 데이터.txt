/// 데이터 /////////////////////////////////////////////////////////

--------------------------
1.	값 형식	vs 참조 형식
--------------------------
	0.	기본 데이터 형식.

		-	숫자, 논리, 문자열, 오브젝트형식.
	
	1.	값 형식

		-	변수가 값을 관리하는 데이터 형식.

		-	스택이라는 메모리 영역에서 관리됨.

		-	숫자, 논리 형식, 구조체( Struct )


		참조 형식

		-	변수가 값이 아닌 값이 있는 곳의 위치를 담는 형식(참조)

		-	힙이라는 메모리 영역에서 관리됨.

		-	c/c++ 의 포인터와 유사.

		-	문자열, 오브젝트 형식( Class등. )
	

	2.	스택과 값 형식

		-------------------------------------
		{ //	코드블록 시작

			int a = 10;
			int b = 20;
			int c = 30;

		} //	코드블록 종료
		-------------------------------------



		[ 값형식이 스택 메모리 영역에 생성/소멸되는 과정 ]

								| c = 30 |
					| b = 10 |	| b = 40 |	| b = 40 |
		| a = 10 |	| a = 10 |	| a = 10 |	| a = 10 |	| a = 10 |	
		--------------------------------------------------------------------------------

		-	변수가 메모리에 할당된 순서대로 생성되고 생성 역순으로 파괴됨.

			-	Stack, 쌓이는 형태.

		-	a,b,c 순서대로 스택 영역에 메모리 할당.

		-	c,b,a 순서대로 메모리 제거.

		-	코드 블록 안에서 생성된 모든 값 형식 변수들은 코드 블록 종료시 메모리에서 제거.
		
			-	본인의 데이터까지 제거.



	

	3.	힙과 참조 형식

		-------------------------------------
		{ //	코드블록 시작

			object a = 10;
			object b = 20;

		} //	코드블록 종료
		-------------------------------------

		
		[ 값형식이 스택 메모리 영역에 생성/소멸되는 과정 ]

		| b = 10 |	--->	|  20  |	10번지

		| a = 5  |	--->	|  10  |	5번지
		------------------------------------------------
		 < 스택 >			< 힙 >	

		-	참조 형식의 변수는 힙과 스택 영역을 함께 이용.

			-	힙 영역 	: 데이터 관리.

			-	스택 영역	: 데이터를 관리하는 힙 메모리의 주소 관리.

		-	데이터를 직접 관리하는 것이 아닌 데이터가 저장되어 있는

			메모리 주소를 참조.


		-	코드 블록 종료시 스택 데이터는 모두 제거 되지만

			힙에 있는 데이터는 제거되지 않음.

		-	힙 영역의 데이터 중 참조하는 곳이 없는 것들은 가비지 컬렉터의

			제거 대상이 됨.



	4.	힙 영역을 사용하는 이유.

		-	스택에 쌓인 데이터들은 코드블록이 종료되는 시점에서 함께 사라짐.

			-	코드 블록과 상관없이 데이터를 유지하고 싶을때 사용.




