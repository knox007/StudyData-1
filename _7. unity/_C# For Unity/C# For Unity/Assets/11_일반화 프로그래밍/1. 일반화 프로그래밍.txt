/// 일반화 프로그래밍 //////////////////////////////////////

-----------------------------
1.	일반화 프로그래밍.
-----------------------------

	1.	일반화.

		-	특수한 개념으로부터 공통된 개념을 찾아 묶는 것.

		-	일반화 프로그래밍의 일반화 대상

			-	데이터 형식.

	2.	일반화 프로그래밍이 필요한 경우.

		예)
			1)	정수형 1차원 배열을 복사하는 메소드를 만들었다.

				void CopyArray( int [] src, int [] target )
				{
					for(int i = 0; i < src.Length; ++i)
						target[i] = src[i];
				}


			2)	문자열 배열을 복사하는 기능이 필요하여

				CopyArray를 오버로딩 함.

				void CopyArray( string [] src, string [] target )
				{
					for(int i = 0; i < src.Length; ++i)
						target[i] = src[i];
				}
			
			3)	추후 특정 클래스 형식의 배열을 복사할 필요가 생김.

				void CopyArray( CTest [] src, CTest [] target )
				{
					for(int i = 0; i < src.Length; ++i)
						target[i] = src[i];
				}

			4)	이런 식으로 CopyArray를 오버로드하여
				
				메소드의 버전이 증가.
							
				->	매개변수로 입력되는 변수의 데이터 형식만 다를 뿐, 내부 로직은 같다.

					**	데이터 형식의 일반화 필요성 발생.



-----------------------------
2.	일반화 메소드
-----------------------------
	
	1.	선언

		접근_지정자		반환타입	메소드이름< 형식매개변수 >	( 매개변수_목록 )
		{
			.................
		}
	
	
	2.	CopyArray에 적용.

		//	int 버전.
		void CopyArray( int [] src, int [] target )
		{
			for(int i = 0; i < src.Length; ++i)
				target[i] = src[i];
		}

		//	string 버전.
		void CopyArray( string [] src, string [] target )
		{
			for(int i = 0; i < src.Length; ++i)
				target[i] = src[i];
		}



		-	데이터 타입이 사용된 부분을 "T"라는 기호로 치환.
			
			void CopyArray( T [] src, T [] target )
			{
				for(int i = 0; i < src.Length; ++i)
					target[i] = src[i];
			}

		-	T를 형식 매개변수로 선언
		
			-	메소드 이름 뒤에 "<형식매개변수>" 삽입.
		
			void CopyArray<T>( T [] src, T [] target )
			{
				for(int i = 0; i < src.Length; ++i)
					target[i] = src[i];
			}

	3.	적용

			int[] source = {1,2,3,4,5};
			int[] target = new int[source.Length];

			CopyArray<int>(source, target);

	(소스 참고)
