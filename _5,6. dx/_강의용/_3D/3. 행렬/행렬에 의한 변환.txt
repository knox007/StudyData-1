/// 행렬에 의한 변환 //////////////////////////////////////////////////////

---------------------------
1.	단순한 위치 이동
---------------------------
	1.	버텍스에 직접 접근하여 위치 정보 갱신

		("MyEngine_Translate by Vector" 참고)

	2.	하나의 캐릭터를 이동하는 기능을 구현할때 해당 캐릭터의 버텍스 갯수가 수백, 수천개라면...?


---------------------------
2.	그래픽 파이프 라인
---------------------------

	1.	정점 처리 과정

			버텍스 데이터	-- 읽기 -->		로컬 좌표 위치		-- 월드 변환 -->

			월드 좌표	-- 뷰 변환 -->		카메라 좌표 위치	-- 투영(정규) 변환 -->

			정규 좌표 위치	-- 뷰 포트 변환 -->	장치 좌표 위치		-- 래스터 라이징 --> 픽셀.


	
	2.	월드 변환

		1.	DrawPrimitive() 함수가 호출
		
			-	GPU는 입력받은 버텍스 버퍼로부터 위치 값을 읽음.	( 로컬 좌표계상의 위치 )

			-	이 모델을 적절히 배치해서 장면을 연출함.
	
				-	이때 필요한 기준 좌표계가 월드 좌표계.

		
		2.	월드 변환

			-	로컬 좌표계의 오브젝트를 월드표계의 위치로 변환.

			-	폴리곤의 증가로 발생하는 루프 반복처리 문제 해결.



	3.	뷰 변환

		1.	뷰변환

			-	버텍스 버퍼를 카메라 공간 좌표계로 변환.

			-	카메라의 위치를 기준으로( 카메라 좌표가 월드좌표의 (0,0,0) ) 모든 오브젝트들의 트랜스폼 정보를

				상대적으로 변환.





	4.	투영 변환

		1	투영 변환.

			-	뷰 변환된 좌표계의 기하 정보들을 모니터에 맞는 2D 좌표로 변환.

			-	이 과정을 거치면 좌표 정보는 (-1, -1, 0 ) ~ (1, 1, 1) 사이의 값으로 결정됨.




	5.	뷰포트 변환
	
		1.	뷰포트 변환.

			-	윈도우의 클리핑 영역에 맞게 변환.

			-	뷰포트를 따로 설정하지 않으면 장치(디바이스)생성시 설정했던 화면의 너비와 높이가 디폴트 값이 됨.

