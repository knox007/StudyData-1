/// 유니 코드 /////////////////////////////////////////////////////////
------------
1.	문자 코드
------------
	1.	정의	:	문자를 숫자에 대응시켜 나타내는 일종의 대응표.
					
	2,	종류
		1)	Single Byte Character Set (SBCS)
			-	한 바이트로 한 문자를 표현하는 문자 코드.
			-	1byte = 8bit = 2^8 = 256, 256자 표현 가능.
			-	단점
				:	미국의 문자에만 맞게 작성되어 다른 나라의 언어 표현에 한계.
				:	서양문자는 1바이트로 대부분 표현이 가능하지만
					한중일등 동양문자는 2바이트를 사용.(DBCS 사용.)

		2)	Double Byte Character Set (DBCS)
			-	2 바이트로 한 문자를 표현하는 문자 코드.

		3)	Multi Byte Character Set (MBCS)
			-	SBCS와 DBCS를 섞어서 사용.
			-	단점	
				:	한글은 2바이트, 영문,숫자,기호 등은 1바이트를 차지하므로
					바이트의 길이만으로 문자의 갯수를 정확히 알수 없음.
					
					예) "헬로World"

					-------------------------------------					
					|		|		| 	|	|   | 	| 	|
					|	헬	|	로	| w	| o	| r | l	| d	|
					|		|		| 	| 	|   | 	| 	|
					-------------------------------------
				
				:	문자열 중간에서 바로 앞 문자를 구하고 싶을때 문자열의 선두에서부터
					문자를 하나씩 읽어와야만 한다.
					중간위치의 문자가 2바이트짜리 문자의 선두인지 마지막인지 알수 없다.
				
				:	DBCS의 경우 각 코드 페이지에 따라 실제 맵핑되는 문자가 달라질수 있다.
					예) "헬로World"가 한글 윈도우즈에서는 그대로 보이지만 중국어나 일본어 윈도우에선
						한글 부분에 한자나, 히라가나 등의 코드가 매핑되어 있다.

------------
2.	유니 코드
------------
	1.	특징
		-	모든 문자를 2바이트로 표현( 65536개의 문자 표현 가능.)
		-	각 국가별로 코드 영역이 구분되어 있어서 코드 페이지를 변경할 필요 없음.
		-	한글이나 영문이나 모두 2바이트 이므로 문자수는 정확하게 배열 길이와 같음.
		


------------
3.	UTF( UCS Transformation Foramt )
------------
	1.	필요성
		:	유니코드가 문자코드 체계를 잘 정의하기는 하지만 모든 경우에 이 표준이 적합하지는 않아
			실제 적용에 맞게 변형할 필요가 있음.
		:	UTF-1, UTF-7, UTF-8, UTF-16, UTF-32 등이 있음.
			주로 UTF-8, UTF-16이 많이 쓰임.

		1)	UTF-16
			:	유니코드의 표준대로 모든 문자를 2바이트로 표시.

		2)	UTF-8
			:	알파벳,숫자,기도등은 1바이트로 표시
			:	가변 길이 체계를 가지고 있다.

	2.	윈도우와 유니코드
		-	윈도우9x 계열은 유니코드를 지원하지 않음.
		-	윈도우NT 이후 운영체제는 내부적으로 유니코드만 사용.
		-	ANSI계열로 컴파일 해도 내부에서 유니코드로 변환해서 사용.
			-> 유니 코드로 컴파일해야 변환없이 곧바로 호출할수 있으므로 제 속도가 나온다.



------------
4.	API의 유니코드 지원.
------------
	1.	문자형 타입		
						일반형		유니코드			ANSI			설명
					---------------------------------------------------------
						TCHAR		wchar_t				char			문자
						LPTSTR		wchar_t*			char*			문자열
						LPCTSTR		const wchar_t*		const char*		문자열 상수

	
	2.	문자열 상수	:	TEXT, _T, __T, _TEXT 등.

	3.	함수
		
		예)	TextOut		-	TextOutA / TextOutW 로 구성.
						-	A : ANSI	/	W : Wide
						-	MT/2000 계열은 TextOutW에만 코드를 정의하고
							TextOutA는 ANSI포맷으로 전달된 문자열을 유니코드로 변환후 TextOutW를 호출하는 방식.
							내부적인 모든 처리는 유니코드로 변환되어 처리.

		*	WinMain는  ANSI 버전만 존재함.
			과거와의 호환성을 위해 ANSI 버전만 존재.
			두번째 인수 lpszCmdParam은 항상 LPSTR 타입.


	4.	구조체.
		예)	WNDCLASS.

	5.	메시지
		-	문자열을 사용하는 메시지들.
			예)	WM_SETTEXT, LB_ADDSTRING 등
			
			->	윈도우 클래스를 등록할 때 어떤 함수를 사용했는가에 따라 메시지의 포맷이 결정된다.
				단, 표준 메시지에 대해서만 적용.
				커스텀 메시지를 보낼 때는 받는 쪽의 윈도우가 유니코드 윈도우인지 확인후 직접 변환해서 전달.
				IsWindowUnicode함수로 확인 가능.
						


		
------------
5.	C런타임의 유니코드 지원.
------------
							ANSI			유니코드			일반형				API	제공		설명
						----------------------------------------------------------------------------------
							strlen			wcslen				_tcslen				lstrlen			
							strcpy			wcscpy				_tcscpy				lstrcpy
							strcmp			wcscmp				_tcscmp				lstrcat
							strcmpi			_wcsicmp			_tcsicmp			lstrcmp
							strcat			wcscat				_tcscat				lstrcmpi
							atoi			_wtoi				_ttoi
							sprintf			swprintf			_stprintf			wsprintf
		
		-	가급적 API 함수를 사용할 것.
			-	운영체제가 제공하므로 별도의 용량을 차지하지 않고 이미 메모리에 올라와 있을 확률이 높기 때문.
				단,wsprintf	의 경우 %f서식을 지원하지 않고 버퍼의 길이가 1024까지만 지원.
				-	sprintf나 _stprintf등을 사용할 것.