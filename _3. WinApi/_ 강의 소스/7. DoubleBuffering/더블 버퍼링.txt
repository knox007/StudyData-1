/// 비트맵 활용 ////////////////////////////////////////////////////////////
1.	가상 화면.
	-	정의	:	모니터상의 화면이 아닌 메모리에 구현된 가짜화면.
					
	-	만들기	:	화면DC와 호환되는 메모리DC를 생성.
					메모리DC에 비트맵을 선택.
					메모리DC가 가상화면이 됨.

	-	특징	:	진짜화면가 마찬가지로 모든 그래픽을 출력 할 수 있다.
					(이때 출력은 화면이 아닌 메모리DC에 선택된 비트맵으로 보내짐.)
					비트맵이 모니터처럼 그리기 표면이 되기때문에
					이때 사용되는 비트맵을 OffScreen Bitmap이라고도 함.
	
	-	목적	:	그림을 그리는 중간과정을 보여주지 않기 위해서.
					화면을 갱신하는 과정에서 화면의 깜빡거림 발생.
					게임에 많이 활용됨.

/// 더블 버퍼링 ////////////////////////////////////////////////////////////

1.	화면 깜빡임이 생기는 이유
	-	InvalidateRect 호출시 마지막인수가 TRUE이면	화면 전체를
		윈도우 클래스에 등록된 배경 브러시로 작업영역 전체를 완전히 지운다.
		(BeginPaint호출시 WM_ERASEBKGND가 발생.
		 DefWindowProc에서 처리를 한다. -> return 0; 이 아닌 break;로 종료해야함.
		 FALSE시에는 호출 안됨.)
	-	컴퓨터 처리 속도가 빠르다면 눈에 띄질 않는다.
		( 깜빡임이 사라지는 건 아니며 깜빡임의 주파수가 높아질 뿐이다. )


2.	해결 방법
	-	무효 영역 최소화.( InvalidateRect 영역을 최소화. )
		장점 :	속도가 매우 빠름.
		단점 :	애니메이션 영역이 좁아야한다는 제약.
				게임의 경우 에니메이션이 적용되는 객체가 화면 전역역에 걸쳐 있으므로
				큰 의미가 없음.

	-	원래 그림을 지우지 않고 새로 그려지는 그림으로 덮어 쓰는 방식.
		장점 :	배경과 그려지는 그림이 단순할때는 적용 가능.
		단점 :	앞에 그림에 의해 배경 일부가 삭제 될수 있음.


	-	더블 버퍼링!!!
		

3. 더블 버퍼링
	-	정의	:	버퍼를 2개이상 사용.
					화면에 보여줄 버퍼와 내부작업에 사용할 버퍼를 따로 유지.
					내부 버퍼에 미리 그림을 그린후 화면버퍼로 고속 전송.
					그리는 중간과정을 내부 버퍼에서 처리함으로써 사용자는 최종 결과만 보는 기법.
	-	내부버퍼
		메모리 영역.
		외부버퍼(화면)과 호환 되어야함.
		윈도우즈에서는 비트맵이 내부버퍼 역할을 대신할 수 있다.



