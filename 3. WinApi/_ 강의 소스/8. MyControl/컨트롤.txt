/// 컨트롤 /////////////////////////////////////////////////////////
------------
1.	정의
------------
	-	사용자로부터 명령을 받아들이고 출력결과를 보여주는 도구. UI
	-	버튼류, 에디트 박스, 리스트 박스 등등...
	-	윈도우의 일종, CreateWindow로 생성.
	-	윈도우 클래스를 만들어 사용할 필요는 없음.
		( 윈도우즈가 운영체제 차원에서 미리 정의되어 있는 윈도우 클래스를 제공해주기 때문 )
	-	컨트롤용 윈도우 클래스 종류
		button		:	버튼
		edit		:	에디트 박스
		listbox		:	리스트 박스
		combobox	:	콤보 박스
		scrollbar	:	스크롤
		static		:	스태틱

	-	WS_CHILD | WS_VISIBLE은 기본.
	-	컨트롤의 3요소

		1)	(생성시)스타일 

		2)	컨트롤 -> 부모 ( 통지 메시지 ) 

		3) 	부모 -> 컨트롤( SendMessage )





------------
2-1.	버튼
------------
1.	용도	:	사용자로부터 명령을 받아들이기 위해 사용

2.	생성하기

	-	스타일
			BS_PUSHBUTTON			푸시 버튼 
			BS_DEFPUSHBUTTON		디폴트 푸시 버튼 															
				
			BS_CHECKBOX				체크 박스 
			BS_3STATE				3가지 상태를 가지는 체크 박스 
			BS_AUTOCEHCKBOX			자동 체크 박스 
			BS_AUTO3STATE			3가지 상태를 가지는 자동 체크 박스 

			BS_RADIOBUTTON			라디오 버튼

			BS_GROUPBOX				그룹 박스



	HWND CreateWindow(	TEXT("button"),								//	버튼 클래스. 
	
						TEXT("버튼 입니다."),						//	일반 윈도우는 캡션바에 나오는 윈도우 타이틀.
																		버튼은 상단에 출력,
																		체크박스, 라디오 버튼은 좌측에 출력.
																		리스트 박스, 스크롤 바등 캡션이 필요없는 컨트롤은 NULL 지정.

						WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,		//	윈도우 스타일.																		

						20,											//	위치. 
						20,
						100,										//	크기.
						25,
						hWnd,										//	부모 윈도우.
																		컨트롤은 차일드 윈도우이므로
																		부모 윈도우가 있어야한다.
																		부모 윈도우의 작업 영역을 기준으로 한 좌표에 생성.
																		이벤트가 생성되면 부모 윈도우에게 통지 메시지를 보내며
																		부모 윈도우가 파괴될 때 같이 파괴된다.
				
						(HMENU)0,									//	메뉴핸들.
																		차일드 컨트롤의 경우 컨트롤의 ID.
				
						g_hInst,									//	컨트롤을 만드는 인스턴스의 핸들.
						NULL);										//	MDI에서 사용하는 구조체.
																		보통 무시.
					
						HWND 리턴.									//	일반 윈도우와 마찬가지로 컨트롤의 핸들 반환(윈도우 핸들.)
																		부모윈도우로부터 메시지 처리시 사용.
																		( MoveWindow, ShowWindow등 윈도우 핸들을 필요로 하는 함수.)

------------
2-2.	부모와 컨트롤간의 통신.
------------
1.	컨트롤은 자신에게 이벤트가 발생했을 때( 버튼 클릭, 에디트에 입력 등.)
	부모윈도우에게 통지 메시지( Notification Message )를 보낸다.
	WM_COMMAND와 적절한 파라미터 값을 전달한다.

	HIWORD(wParam)		통지코드 
	LOWORD(wParam)		컨트롤의 ID 
	lParam				메시지를 보낸 차일드 윈도우의 윈도우 핸들 


2.	버튼	->	부모
	HIWORD(wParam)		통지코드는 항상 BN_CLICKED
	LOWORD(wParam)		버튼의 ID 







------------
3-1.	체크박스.
------------
1.	용도	:	주로 어떤 사항의 참,거짓 또는 Yes,No 여부를 선택하기 위해 사용.
2.	생성하기
	-	버튼과 유사.
	-	윈도우 클래스		:	"button"
	-	스타일				:	상태 변경시 어떤 처리가 필요한지 여부
								-	자동/수동
								-	주로 자동상태를 선택하여 상태값만 조사할 경우가 많음.

								선택 가능한 상태의 갯수
								-	2/3가지 상태
								-	3가지 상태의 경우 선택 / 비선택 / 알수없음( 결정할 수 없음)
								

								수동			자동
				2가지 상태		BS_CHECKBOX		BS_AUTOCHECKBOX
				3가지 상태		BS_3STATE		BS_AUTO3STATE
				
------------
3-2.	부모와 컨트롤간의 통신.
------------
1.	부모 -> 체크박스(SendMessage)

	BM_GETCHECK	:	현재 체크되어 있는지 조사.
					추가정보는 없다.

	BM_SETCHECK	:	체크 상태를 변경하며 wParam에 변경할 체크 상태를 보내줌.

2.	BM_GETCHECK에 의해 리턴, 또는 BM_SETCHECK로 설정할 수 있는 값.

	BST_CHECKED			:	체크되어 있다. 
	BST_UNCHECKED		:	체크되어 있지 않다. 
	BST_INDETERMINATE	:	알수없음, 결정할 수 없음.







------------
4-1.	라디오 박스.
------------
1.	용도	:	여러가지 선택 사항 중 한가지만 선택할 필요가 있을 때 사용.				
				하나의 선택사항에 대해 여러개의 라디오 버튼들이 그룹을 이룸.
				같은 그룹내의 한개의 라디오 버튼이 선택되어지면 나머지는 선택이 해제됨.
				
2.	생성하기
		-	윈도우 클래스		:	"button"
		-	그룹을 이루는 첫번째 라디오 버튼에만 WS_GROUP스타일 설정.			
		-	나머지 라디오 버튼은 WS_GROUP 스타일을 주지 않는다.
		-	처음 WS_GROUP을 적용한 라디오 버튼부터 다음 WS_GROUP을 적용한 라디오 버튼 직전까지
			한 그룹.
		-	BS_RADIOBUTTON / BS_AUTORADIOBUTTON	: 수동/자동 라디오 버튼.
		
------------
4-2.	부모와 컨트롤간의 통신.
------------
1.	부모 -> 체크박스
	BOOL CheckRadioButton( HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton );
	-	처음 선택될 라디오 버튼 설정.
	-	hDlg							:	부모 윈도우 핸들.
		nIDFirstButton / nIDLastButton	:	시작 / 끝 라디오 버튼의 인덱스.
		nIDCheckButton					:	선택될 라디오 버튼의 인덱스.

	-	SendMessage를 이용한 방법		:	체크박스와 유사.







------------
과제
------------
999. Homework 프로젝트 참고.







------------
5-1.	에디트 박스.
------------
1.	용도	:	문자열을 직접 입력받을 때 사용.

2.	생성하기
		-	윈도우 클래스		:	"edit"

		-	스타일
			ES_AUTOHSCROLL		수평 스크롤을 지원.
			ES_AUTOVSCROLL		여러줄 편집시 수직 스크롤 지원.
			ES_LEFT				왼쪽 정렬.
			ES_CENTER			중앙 정렬.
			ES_RIGHT			오른쪽 정렬.
			ES_LOWERCASE		소문자로 변환하여 표시.
			ES_UPPERCASE		대문자로 변환하여 표시.
			ES_MULTILINE		여러줄을 편집.
			ES_NOHIDESEL		포커스를 잃더라도 선택된 영역을 표시.
			ES_READONLY			읽기전용.
			
------------
5-2.	부모와 컨트롤간의 통신.
------------
1.	에디트	->	부모	

	EN_CHANGE		문자열이 변경.
	EN_UPDATE		문자열이 변경되기 직전.
	EN_ERRSPACE		메모리가 부족.
	EN_HSCROLL		사용자가 수평 스크롤 바를 클릭.
	EN_VSCROLL		사용자가 수직 스크롤 바를 클릭.
	EN_KILLFOCUS	포커스 잃음.
	EN_SETFOCUS		포커스 얻음.
	EN_MAXTEXT		지정한 문자열 길이 초과.
	
	EN_CHANGE
	-	문자열이 화면으로 출력되고 난 후 보내지는 메시지.	
	
	EN_UPDATE
	-	문자열이 변경된 후 화면에 출력하기 직전에 보내는 메시지.
	-	문자열 길이에 따라 에디트의 폭을 늘리거나 별도의 조치를 취할 수 있다.

	호출 순서.
	-	문자열 변경 -> EN_UPDATE 보냄. -> 화면에 출력 -> EN_CHANGE







------------
6.		컨트롤도 윈도우다.
------------
1.	CreateWindow로 생성하는 윈도우.
	-	컨트롤도 CreateWindow로 생성하는 일종의 윈도우이다.
	-	여러가지 스타일로 생성 가능.
	-	부모 윈도우가 메시지를 보내면 해당 메시지를 처리.
		(체크 박스는 BM_SETCHECK를 받으면 wParam값에 따라 자신의 체크 상태를 갱신.)
	-	CreateWindow, SetWindowText, MoveWindow, ShowWindow등의 윈도우 처리 함수 사용 가능.
	-	WM_PAINT메시지를 처리하기 때문에 스스로 이미지 갱신.
	





------------
7-1.		리스트 박스
------------
1.	용도	:	선택가능한 여러개의 항목들(주로 문자열)을 나열해 놓고 그 중 하나(또는 여러개)를 선택.				

2.	생성하기
		-	윈도우 클래스		:	"listbox"

		-	스타일
			LBS_MULTIPLESEL		여러개의 항목을 선택.
								디폴트는 하나만 선택.
			LBS_NOTIFY			목록 중 하나를 선택했을 때 부모 윈도우로 통지 메시지 보내기.
			LBS_SORT			추가된 항목들 자동 정렬.
			LBS_OWNERDRAW		문자열이 아닌 비트맵이나 그림허용.
			LBS_STANDARD		LBS_NOTIFY | LBS_SORT | WS_BORDER 

			부모 윈도우로 통지 메시지를 보내는 것이 일반적 이므로 LBS_NOTIFY는 거의 필수적으로 사용.


------------
7-2.	부모와 컨트롤간의 통신.
------------
1.	부모	->	리스트박스
	
	LB_ADDSTRING		항목 추가.
						lParam - 추가하고자 하는 문자열의 번지 전달.

	LB_DELETESTRING		항목 삭제.
						wParam - 항목의 번호 전달.
						남은 문자열수를 리턴한다.

	LB_GETCURSEL		현재 선택된 항목의 번호(Index) 전달.

	LB_GETTEXT			지정한 항목의 문자열을 전달.
						wParam - 항목 번호
						lParam - 문자열 버퍼의 번지를 넘겨주면 버퍼에 문자열을 채워줌.

	LB_GETCOUNT			항목의 개수 전달.

	LB_SETCURSEL		wParam - 선택하고자 하는 항목 인덱스.


2.	리스트 박스	->	부모.

	LBN_DBLCLK			리스트 박스 더블클릭.	
	LBN_SELCANCEL		선택 취소.
	LBN_SELCHANGE		선택 변경. 가장 많이 사용됨.
	LBN_KILLFOCUS		키보드 포커스 잃음.
	LBN_SETFOCUS		키보드 포커스 얻음.
	LBN_ERRSPACE		메모리가 부족.







	
------------
8-1.	콤보 박스
------------
1.	용도	:	에디트 박스와 리스트 박스를 결합시켜놓은 컨트롤.
				목록에 있는 항목중의 하나를 선택.
				원하는 항목이 없을 경우 에디트에 직접 항목 입력 가능.
				필요할 경우만 목록을 열어 선택하므로 화면 공간을 적게 차지.

2.	생성하기
		-	윈도우 클래스		:	"combobox"

		-	스타일
			CBS_SIMPLE			에디트 only.

			CBS_DROPDOWN		에디트 || 리스트 박스.

			CBS_DROPDOWNLIST	리스트 박스 only
								에디트에 항목을 입력 불가.

		-	이 외의 스타일이나 메시지들은 에디트와 리스트에 있는 것들과 거의 동일.
			접두어만 조금씩 다름.
			예) 리스트 박스 - LB_ADDSTRING
				콤보 박스	- CB_ADDSTRING



------------
8-2.	부모와 컨트롤간의 통신.
------------
1.	에디트 박스와 리스트 박스와 유사.








------------
9-1.	스크롤 바
------------
1.	용도	:	윈도우 스크롤 상태 관리.
				일정 범위에 있는 값을 대강 선택할 경우.
				( 사운드 볼륨, 게임 내 속성 값 등 )

2.	생성하기
		-	윈도우 클래스		:	"scrollbar"

		-	스타일
			SBS_HORZ	:	수평 스크롤 바
			SBS_VERT	:	수직 스크롤 바

	//	스크롤 범위 설정
	BOOL SetScrollRange( HWND hWnd, int nBar, int nMinPos, int nMaxPos, BOOL bRedraw )
		hWnd				:	스크롤바 핸들.
		nBar				:	메인 윈도우에 부착된 스크롤 바 또는 별도의 스크롤 바 컨트롤.
								SBS_CTL 이면 별도의 스크롤 바.
		nMinPos / nMaxPos	:	스크롤 범위
		bRedraw				:	컨트롤 다시 그리기.


	//	스크롤바 현재 위치 설정.
	int SetScrollPos( HWND hWnd, int nBar, int nPos, BOOL bRedraw )
		nPos				:	현재 위치.


------------
9-2.	부모와 컨트롤간의 통신.
------------
	1.	리스트 박스	->	부모.
		다른 컨트롤들은 WM_COMMAND를 통해 통지 메시지를 전달하지만
		스크롤 바는 WM_HSCROLL	/	WM_VSCROLL를 통해 전달함.

		LOWORD(wParam)		스크롤 바 내 마우스로 클릭한 위치.
		HIWORD(wParam)		현재 위치 
		lParam				스크롤 바의 윈도우 핸들.


		LOWORD(wParam)으로 전달 되는 값.

			SB_LINELEFT ( SB_LINEUP )
				왼쪽 화살표 버튼 클릭
				왼쪽(위)으로 한 단위 스크롤.

			SB_LINERIGHT ( SB_LINEDOWN )
				오른쪽 화살표 버튼 클릭.
				오른쪽(아래)으로 한 단위 스크롤.

			SB_PAGELEFT ( SB_PAGEUP )
				왼쪽 몸통 부분 클릭.
				한페이지 왼쪽으로 스크롤.

			SB_PAGERIGHT ( SB_PAGEDOWN )
				오른쪽 몸통 부분 클릭.
				한페이지 오른쪽(아래)으로 스크롤. 

			SB_THUMBPOSITION 
				스크롤 박스를 드래그한 후 마우스 버튼 업.

			SB_THUMBTRACK 
				스크롤 박스를 드래그하고 있는 중.
				마우스 버튼을 놓을 때까지 계속 전달 됨.






			
------------
10.	스태틱
------------
1.	용도	:	문자열 보여주기.
				컨트롤의 용도를 설명해주는 역할.

2.	생성하기
		-	윈도우 클래스		:	"static"

		-	스타일
			SS_LEFT				왼쪽 정렬.	자동 개행.
			SS_LEFTNOWORDWRAP	왼쪽 정렬.	자동 개행 안됨.
			SS_CENTER			중앙 정렬.	자동 개행.
			SS_RIGHT			오른쪽 정렬.	자동 개행.
			SS_SIMPLE			단순 문자열. 자동개행 안됨.
			SS_WHITEFRAME		윈도우의 배경색으로 그려지는 사각형 
			SS_WHITERECT		윈도우의 배경색으로 그려지는 속이 채워진 사각형 
			SS_BLACKFRAME		화면 배경색으로 그려지는 사각형 
			SS_BLACKRECT		화면 배경색으로 그려지는 속이 채워진 사각형 
			SS_GRAYFRAME		윈도우 프레임 색상으로 그려지는 사각형 
			SS_GRAYRECT			윈도우 프레임 색상으로 그려지는 속이 채워진 사각형 
			SS_ICON				대화상자내에서 아이콘 출력 
			SS_NOPREFIX			&문자를 단축키 지정에 사용하지 않고 그대로 출력.

3.	TextOut와 차이점.
	TextOut		:	단순 문자열.
					언제든지 지워질수 있음.
					WM_PAINT에서 계속 복구해야함.
	
	스태틱		:	스스로 메시지를 처리할 수 있는 윈도우.
					(WM_PAINT등 기본 메시지 자체 처리.)
					색상, 글꼴 등 운영체제의 세팅이 바뀔 경우 스스로 대처.





------------
11.	과제
------------

리스트박스			-	도형 선택( 선/ 사각형/ 타원 )
콤보 박스			-	도구 선택( 펜/ 브러시 ) 
스크롤_1			-	R/ G/ B
에디트_1			-	R/ G/ B 수치값.
스크롤_2			-	도형의 x,y 좌표
에디트_1			-	도형의 x,y 좌표 수치값.
스태틱				-	각 컨트롤의 기능 명시.
클라이언트 영역			-	도형 출력
