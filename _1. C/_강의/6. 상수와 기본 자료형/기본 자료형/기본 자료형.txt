/// 기본 자료형의 이해 /////////////////////////////////////////////////////////

------------------------------------------
1.	자료형의 종류와 데이터 표현 범위
------------------------------------------

	1.	정의

		int a = 10;

		->	4바이트 크기의 정수형 데이터 a를 선언하여 10이란 값을 할당한다.

		->	4바이트 크기의 정수형 데이터 : int


		자료형이란?
		:	데이터를 표현하는 방식.





	2.	기본 자료형.

		|	자료형		|	크기		|	값의 표현 범위
	---------------------------------------------------------------------------------
	정수형	|	char		|	1byte		|	-128 ~ 127
		|	short		|	2byte		|	-32,768 ~ 32767
		|	int		|	4byte		|	-2,147,483,648 ~ 2,147,483,647
		|	long		|	4byte		|	-2,147,483,648 ~ 2,147,483,647
		|	long long	|	8byte		|	-9,223,372,036,854,775,808 ~ 9,223,372,036,854,775,807
	---------------------------------------------------------------------------------			
	실수형	|	float		|	4byte		|	3.4e-38 ~ 3.4e38
		|	double		|	8byte		|	1.7e-308 ~ 1.7e308
		|	double double	|	8byte or 이상	|	double 이상의 표현 범위





	3.	다양한 자료형을 제공하는 이유.
		
		1)	데이터의 표현 방식이 다르므로 최소 둘 이상의 자료형이 필요.

			-	정수 / 실수.

		2)	메모리 공간의 적절한 사용을 위해.

			-	예)	정수 5000개를 처리하고 싶을때 short를 이용하면 5000 * 2byte = 10,000 byte가 소모되지만,

					int 를 이용하면 5000 * 4byte = 20,000가 소모된다.




	4.	sizeof연산자를 이용한 자료형의 크기 확인.
		
		-	sizeof	: 	메모리 공간에 소모되는 메모리 크기를 바이트 단위로 반환.
				
					함수가 아니라 연산자임!!	

		( "SizeOfOperator" 참고 )




------------------------------------------
2.	자료형의 선택
------------------------------------------

	1.	정수 자료형의 선택

		-	일반적으로 short의 범위를 넘어서는 범위의 값은 int형을 사용한다.
	
			-	short 범위 이내라면 short 형이 더 효율적인가?

			

		( "2.	정수 자료형의 선택." 참고 )




	2.	실수 자료형의 선택

		-	실수형 데이터의 표현 범위는 매우 넓다.

			-	즉, 값의 표현범위는 중요한 요소가 아니다.

				- "정밀도"가 중요 요소이다.


		
		실수 자료형	|	소수점 이하 정밀도	|	바이트 수
	-------------------------------------------------------------------------------
		float		|	6자리			|	4 바이트
		double		|	15자리			|	8 바이트
		long double	|	18자리			|	12 바이트




	3.	unsigned를 이용하여 0 ~ 양의 정수(!) 표현.

		|	자료형		|	크기		|	값의 표현 범위
	---------------------------------------------------------------------------------
	정수형	|	char		|	1byte		|	-128 ~ 127
		|	unsigned char	|			|	0 ~ 128 - (-127)
	---------------------------------------------------------------------------------
		|	short		|	2byte		|	-32,768 ~ 32767
		|	unsigned short	|			|	0 ~ 32767 - (-32,768)
	---------------------------------------------------------------------------------
		|	int		|	4byte		|	-2,147,483,648 ~ 2,147,483,647
		|	unsigned int	|			|	0 ~ 2,147,483,647 - (-2,147,483,648 )
	---------------------------------------------------------------------------------
						이하 동일
	---------------------------------------------------------------------------------
		
		-	unsigned 	정수 자료형	변수명;

		-	MSB도 데이터의 크기를 표현하는데 사용.

		-	값의 표현 범위가 0 이상의 범위로 2배가 됨.
			






----------------------------------
3.	문자의 표현 방식과 자료형
----------------------------------

	1.	컴퓨터는 숫자를 이용해서 자료를 인식하고 표현한다.
		
		문자도 숫자를 이용해서 표현해야한다.

		-	특정 숫자를 특정 문자로 인식하도록 약속.

			-	예)	문자 A - 숫자 65
					문자 B - 숫자 66
					....

	2.	아스키코드( ASCII, American Standard Code for Information Interchange )

		-	ANSI( American National Standards Institute, 미국 표준 협회 )에 의해 제정된 표준.
		
		-	알파벳과 일부 특수문자를 포함하여 총 128개 문자로 이루어짐.

		

		아스키 코드	|	아스키 코드 값	
		-----------------------------------------
			A	|	65
			B	|	66
			C	|	67
			'	|	96
			~	|	126



	3.	표현.


		int main ()
		{
			char ch1 = 'A';
			char ch2 = 'C';
			...
		}

		-	문자표현에는 작은 따옴표를 사용한다.(' ')

		-	컴파일러에 의해 코드 값으로 변환된다.

			-	컴파일러도 아스키 코드에 대한 정보를 포함하고 있다.


		int main ()
		{
			char ch1 = 65;
			char ch2 = 67;
			...
		}


		( "CharTest"참고 )













