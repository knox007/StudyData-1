/// 함수 포인터 ///////////////////////////////////////////

------------------
1.	함수 포인터의 이해
------------------

	1.	변수 뿐만이 아니라 프로그래머가 구현하는 모든 함수도

		바이너리 형태로 메모리 공간에 저장되어서 호출 시 실행됨.
		
		(재귀함수에서 관련 내용 일부 언급)


	2.	함수 포인터

		-	메모리상에 저장된 함수의 주소 값을 저장하는 포인터 변수


	3.	배열의 이름 = 배열의 시작주소.

		함수 이름 = 함수가 저장된 메모리 공간의 주소 값.

		배열과 마찬가지로 함수의 이름도 상수형 포인터.



------------------
2.	함수 포인터의 선언
------------------

	1.	함수 포인터의 포인터 형 결정.

		-	함수 포인터의 타입은 반환형과 매개변수의 선언을 통해 결정짓는다.


		예 1)

			int TestFunc( int num )	{ ..... }

			-	TestFunc 분석

				-	반환형		:	int
	
				-	매개변수 	:	int num

	
				->	TestFunc의 포인터 형은 
	
					< 반환형이 int 형, 매개변수는 int형 변수 하나인 포인터형 >


		예 2)
		
			double TestFunc2( int num1, double num2 ) { ...... }


				->	TestFunc2의 포인터 형은?


		-	int BirthDay( int Year, int Month );

			string GetGrade(int score );

			int Class( int Grade, int ClassNum );

			string GetQuest(int idx);

			->	위 함수들 중 포인터 형이 일치하는 것은?
			
			

			
	2.	함수 포인터 변수 선언

		-	반환형 정보와 매개변수 선언의 정보가 표현되어야 함.

		예)

			반환형이 int 형, 매개변수는 int형 변수 하나인 함수포인터 변수는

			1)	포인터 변수 이름 선언

				-	    (*ptrFunc)

			2)	"반환형 int" 적용

				-	int (*ptrFunc)

			3)	"매개변수는 int형 변수 한개" 적용

				-	int (*ptrFunc)(int)


		-	int Func( int num1, int num2 ) { ..... } 의 함수 포인터 변수

			-	int (*ptrFunc)(int, int)

			-	할당

				-	ptrFunc = Func;

			-	함수 포인터 사용

				-	ptrFunc(3, 4);	=>	Func(3,4);와 동일				
		

		(소스 참고)
	

				