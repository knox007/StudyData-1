/// 변수와 자료형 ///////////////////////////////////////////////////

---------------
1.	자료형(데이터 타입)
---------------
	1.	종류
	
		bool	:	true / false		

		byte	:	8bit

		short	:	16bit

		int	:	32bit

		long	:	64bit

		float	:	32bit 부동 소수점 숫자
		
		double	:	64bit 부동 소수점 숫자

		string	:	문자열(유니코드)

		object	:	모든 타입의 기본 클래스


		
			
		정수형	변수	:	정수의 저장을 목적으로 선언된 변수.
					short, int, long.

		실수형 변수	:	소수점 이하의 값을 지니는 실수의 저장을 목적으로 선언된 변수.
					float, double						


		-	구분되는 이유
				
			정수와 실수의 값을 메모리 공간에 저장하거나 참조되는 방식이 다르기 때문.


---------------
2.	변수
---------------

	1.	정의	:	값을 저장할 수 있는 메모리 공간에 붙은 이름, 혹은 메모리 공간 자체.

	2.	변수의 선언
	
		-	형식	:	변수 타입	변수명;

			ex)	int		score;
				(변수타입)	(변수명)

				int	: 정수형 데이터의 저장이 가능한 메모리 공간.
				score	: 메모리 공간의 이름은 score;

	3.	변수의 선언 및 초기화( * 정의가 다양함, 본 수업에서는 이렇게 정의하여 사용 )

		-	초기화	:	선언된 변수에 값을 정의하는 것.
					
			ex) 	int score;		//	선언.
				score = 90;		//	정의.
				int score = 100;	//	초기화.(선언와 정의를 동시에 진행)

		
		-	둘 이상의 변수를 동시에 선언 및 초기화도 가능하다.
			
			ex)	int scoreEng, scoreKor;
				int scoreEng = 100, scoreKor = 100;


	4.	변수 선언시 주의 사항
			
		-	변수의 이름은 알파벳, 숫자, 언더바(_)로 구성된다.

		-	대소문자를 구분한다
			int score;와 int Score;는 서로 다른 변수이다.

		-	변수 작명시 숫자로 시작할 수 없고, 키워드도 변수의 이름으로 사용할 수 없다.(함수명, 자료형 등)

		-	변수명 사이에 공백( X )


	5.	지역변수, 멤버변수, 전역변수

		지역변수 	- 	함수나 for, if문등의 { }내에서 선언된 변수.
				-	{ }의 범위가 끝나면 변수의 수명도 종료된다.
				-	{ } 안에서만 인식이 가능하다.
				-	선언후 정의 하거나 초기화를 하지않으면 에러를 발생한다.

		멤버변수	-	클래스의 멤버로 선언된 변수.
				-	해당 클래스의 수명과 함께한다.
				-	클래스 내의 다른 멤버 함수들도 참조가 가능하다.
				-	선언후 정의 하거나 초기화를 하지않으면 기본값이 할당된다. 
					int = 0, bool = false
		
		전역변수	-	프로그램의 수명과 함께하는 변수.
				-	모든 소스 영역에서 참조가 가능하다
				-	선언후 정의 하거나 초기화를 하지않으면 기본값이 할당된다. 
				-	c#에선 전역변수에 대한 선언자체가 없다.





---------------
2.	상수
---------------


		상수	: 	변경이 불가능한 데이터

				-	리터럴 상수( 이름이 없는 상수 )
				
					123    	int 리터럴
					12.3    double 리터럴
					"A"     string 리터럴				
					true    bool 리터럴


					C# 리터럴 데이타 타입 	|	Suffix (대소문자 모두 가능) 	|	예제 
					-----------------------------------------------------------------------------------------------
					long 					|	L								|	1024L 
					-----------------------------------------------------------------------------------------------
					float 					|	F 								|	10.24F 
					-----------------------------------------------------------------------------------------------
					double 					|	D	 							|	10.24D 또는 10.24 
					-----------------------------------------------------------------------------------------------

					
				-	심볼릭 상수( 이름이 있는 상수 )
					
					변수처럼 선언하며 앞에 const(컴파일타임 상수)나 readonly(런타임 상수)를 붙여 상수임을 나타낸다.

					const int MAXVALUE = 10000;
					readonly int MINVALUE = 100;

					* const / readonly 의 차이

										|	const				|	readonly
					-------------------------------------------------------------------------------------
					퍼포먼스(속도)		|	빠름				|	상대적으로 느림	
					-------------------------------------------------------------------------------------
					리터럴화 되는 시점	|	컴파일				|	런타임
					-------------------------------------------------------------------------------------
					유연성				|	내장 데이터만 가능	|	상관없음.		
					-------------------------------------------------------------------------------------
					할당시점			|	초기화				|	초기화, 정의(생성자에서만 가능)
					-------------------------------------------------------------------------------------
				
					** 대부분의 경우 const 보다는 readonly를 사용하는 편이 낫다.

		
		



			