using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OperatorTest : MonoBehaviour
{
    //------------------------------------------------
    public int num1 = 11, num2 = 3;    
    //------------------------------------------------
    void Start ()
    {   
        print("num1 = " + num1 + ", " + "num2 = " + num2);
        print("------------------------------");
        //---------------------------------
        //*  부호 연산자 : +,-
        print( "---  부호연산자 ---");
        print(+num1);
        print(-num1);
        //*/
        //---------------------------------
        /* 산술 연산자 : +,-,*,/,%
        print( "---  산술 연산자 ---");

        print(num1 + " + " + num2 + " = " + (num1 + num2));
        print(num1 + " - " + num2 + " = " + (num1 - num2));
        print(num1 + " * " + num2 + " = " + (num1 * num2));
        print(num1 + " / " + num2 + " = " + (num1 / num2));
        print(num1 + " % " + num2 + " = " + (num1 % num2));
        //*/
        //---------------------------------
        /* 비교 연산자 : ==, !=, >=, <=, >,<
        print("---  비교 연산자 ---");

        print("num1 == num2 = " + (num1 == num2));
        print("num1 = num2 = " + (num1 = num2));
        print("num1 != num2 = " + (num1 != num2));
        print("num1 >= num2 = " + (num1 >= num2));
        print("num1 <= num2 = " + (num1 <= num2));
        print("num1 > num2 = " + (num1 > num2));
        print("num1 < num2 = " + (num1 < num2));        
        //*/
        //---------------------------------
        /* 논리 연산자 :  &&, ||, !
        bool a = true, b = false;
        print("---  논리 연산자 ---");
        print("a && b = " + (a && b));
        print("a || b = " + (a || b));
        print("!a = " + (!a));
        print("!b = " + (!b));

        //*/
        //---------------------------------
        /* 증감 연산자( 전치,후치 ) : ++, --
         * print("---  증감 연산자 ---");
        print("num1-- = " + num1++);
        print("++num2 = " + ++num2);
        print("num1-- = " + num1--);
        print("--num2 = " + --num2);

        print("num1++ + 5 = " + (num1++ + 5));
        print("--num2 + 5 = " + (--num2 + 5));
        //*/
        //---------------------------------
        /* 비트 연산자 : &, |, ^, <<,>>
        print("---  비트 연산자 ---");
        byte bit1 = 1;
        byte bit2 = 16;
        print("bit1 = " + GetBinaryNumberString(bit1));
        print("bit2 = " + GetBinaryNumberString(bit2));
        print("bit1 & bit2 = " + GetBinaryNumberString(bit1 & bit2));
        print("bit1 | bit2 = " + GetBinaryNumberString(bit1 | bit2));
        print("bit1 ^ bit2 = " + GetBinaryNumberString(bit1 ^ bit2));
        print("~bit2 = " + GetBinaryNumberString((~bit2)));        
        print("bit1 << 1 = " + GetBinaryNumberString(bit1 << 1));
        print("bit1 >> 1 = " + GetBinaryNumberString(bit1 >> 1));
        print("bit2 << 1 = " + GetBinaryNumberString(bit2 << 1));
        print("bit2 >> 1 = " + GetBinaryNumberString(bit2 >> 1));
        //*/
        //---------------------------------
        /* 대입 연산자 : +=, -=, *=, /=, %=
        print("---  대입 연산자 ---");
        print("num1 += 2 = " + (num1 += 2));
        print("num1 -= 2 = " + (num1 -= 2));
        print("num1 *= 2 = " + (num1 *= 2));
        print("num1 /= 2 = " + (num1 /= 2));
        print("num1 %= 2 = " + (num1 %= 2));
        //*/
        //---------------------------------
        /* 삼항 연산자 : ( 조건 ? 참인경우 : 거짓인 경우 )
        print("num1 == 11 ? "+ (num1 == 11 ? "빙고" : "땡!!") );
        print("num1 > 11 ? " + (num1 > 11 ? "빙고" : "땡!!"));
        print("num1 >= 11 ? " + (num1 >= 11 ? "빙고" : "땡!!"));
        //*/
        //---------------------------------

    }// void Start ()
    //------------------------------------------------
    string GetBinaryNumberString(int num)
    {
        string ret = "0x";
        ret += Convert.ToString(num, 2).PadLeft(8, '0');
        return ret;
    }
    //------------------------------------------------

}// public class OperatorTest : MonoBehaviour

//======================================================
/*	9.	연산자 우선순위
	
	정의 : 연산자가 피연산자에 적용되는 순서를 정리하는 것.

	결합 방향 : 연산자에대한 피연산자의 적용 방향.

	
	순위	|	연산기호		|	연산자				|	결합방향
	--------------------------------------------------------------
	1		|	++, --			|	후치증감			|	->
	--------------------------------------------------------------
	2		|	++, --			|	전치증감			|	<-
			|	~				|	비트연산(NOT)		|
			|	!				|	논리(NOT)			|
			|	+,-				|	부호연산(양,음)		|
	--------------------------------------------------------------
	3		|	*,-,%			|	곱셈,나눗셈,나머지	|	->
	--------------------------------------------------------------
	4		|	+,-				|	덧셈,뺄셈			|	->
	--------------------------------------------------------------
	5		|	<<,>>			|	비트이동			|	->
	--------------------------------------------------------------
	6		|	<.>,<=,>=		|	대소 비교			|	->
	--------------------------------------------------------------
	7		|	==, !=			|	동등 비교			|	->
	--------------------------------------------------------------
	8		|	&				|	비트연산(AND)		|	->
	--------------------------------------------------------------
	9		|	^				|	비트연산(XOR)		|	->
	--------------------------------------------------------------
	10		|	|				|	비트연산(OR)		|	->
	--------------------------------------------------------------
	11		|	&&				|	논리(AND)			|	->
	--------------------------------------------------------------
	12		|	||				|	논리(OR)			|	->
	--------------------------------------------------------------
	13		|	? :				|	삼항연산(조건연산)	|	<-
	--------------------------------------------------------------
	14		|	=,+=, -=, *= 외	|	대입연산			|	<-
	--------------------------------------------------------------
	15		|	,				|	콤마연산			|	->
	--------------------------------------------------------------
*/
//======================================================