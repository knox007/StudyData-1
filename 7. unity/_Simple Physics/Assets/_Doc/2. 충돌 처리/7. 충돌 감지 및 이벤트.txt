---------------------------------
1.	충돌 감지 조건
---------------------------------

	1.	두개의 오브젝트가 충돌을 감지하려면 다음의 조건이 만족되어야 함.

		-	충돌을 일으키는 두개의 게임오브젝트 모두 Collider 가 적용.

		-	움직이는 오브젝트에는 반드시 Rigidbody가 적용.
								
											------------------
		-----------------					|				|
		|				|					|				|
		|	Collider	|					|	Collider	|
		|	Rigidbody	|	------>			|				|		
		|				|					|				|
		-----------------					|				|
									--------------------------------


---------------------------------
2.	충돌 이벤트
---------------------------------

			함수명			|				호출 조건						|	is Trigger	
	----------------------------------------------------------------------------------------------
	void OnCollisionEnter	|	두 물체간의 충돌이 일어나기 시작한 경우.	|		X
	void OnCollisionStay	|	두 물체간의 충돌 상태가 유지중인 경우.		|		X
	void OnCollisionExit	|	두 물체간가 서로 떨어졌을 때.				|		X
	----------------------------------------------------------------------------------------------
	void OnTriggerEnter		|	두 물체간의 충돌이 일어나기 시작한 경우.	|		O
	void OnTriggerStay		|	두 물체간의 충돌 상태가 유지중인 경우.		|		O
	void OnTriggerExit		|	두 물체간가 서로 떨어졌을 때.				|		O
	----------------------------------------------------------------------------------------------

	-	Is Trigger
		
		-	체크시 충돌감지는 되지만 물리적인 현상은 일으키기 않음.

			-	물체를 관통하게 됨.

			-	OnTrigger 계열 함수가 호출됨.

				-	언체크시 OnCollision 계열 함수 호출.
		
		-	주로 이벤트를 발생을 알리는 센서 역할.

			-	케릭터가 자동문 앞에 도착했을때 문이 자동으로 열리게 하는 이벤트.

			-	특정 지역에 집입시 적 캐릭터가 생성되게 하는 이벤트.

	-	주의 사항

		-	OnCollisionEnter 등의 이벤트 함수는 대소문자 또는 오탈자가 있더라도 오류가 발생하지 않음.

			다만 OnCollisionEnter 가 호출되지 않는 것으로 판단 할 뿐.
			
---------------------------------
3.	태그
---------------------------------

	1.	충돌 이벤트 발생시 충돌된 어떤 오브젝트가 충돌되었는지 알 필요가 있음.

		-	이름으로 구분 하는 것보다 태그를 사용하여 공통된 그룹으로 처리하는게 더 효율적임.

	
	2.	적용 방법.

		1)	메뉴	->	Edit	->	Project Setting	->	Tag & Layers		

		2)	인스펙터 뷰 상단	->	Tag 콤보박스 클릭	->	Add Tag 선택.

	
	3.	주의 사항

		-	Tag는 문자열로 비교하므로 대소문자를 정확히 지켜야 한다.

		-	주로 대문자를 활용.

		-	태그 비교시 == 연산자보다는 CompareTag() 메소드 권장.

			-	tag 프로퍼티를 호출하는 것은 추가적인 메모리를 할당하고 복사하므로

				가비지가 발생가능성 높음.