//=================================================
#include<iostream>
using namespace std;
#pragma warning( disable : 4996 )
//=================================================
/*
	---------------
	1.	싱글톤 패턴
	---------------

		-	필요성

			-	전체 시스템에 걸쳐 단 한개만 필요한 시스템 자원.


		-	책임

			-	전체 시스템에 걸쳐 객체가 단 하나뿐이어야 함.

			-	해당 클래스로 여러곳에서 객체를 만들 수 없어야 함.

		
		-	싱글톤 생성 단계

			1)	객체를 여러곳에서 만들수 없도록 한다.

				-	생성자를 private( 또는 protected )로 선언.
				
					-	외부에서 객체 생성을 하지 못하도록 함.
					
					-	생성자를 호출 하지 못하면 객체가 생성되지 못함.


			2)	생성자 대신 객체를 생성할 객체생성 함수를 만든다.

				-	클래스 외부에서 접근이 가능하도록 해야하므로 public으로 선언.

				-	외부에서 클래스 객체를 생성할 수 없으므로 static 함수로 선언.

				-	static 멤버 함수에서 객체를 생성할 수 있도록 해당 클래스 타입의 멤버변수도 static으로 선언.

			
			3)	객체생성 함수에서 예외 처리한다.

				-	객체가 생성되었는지 확인 후 생성되어 있다면 기존 생성된 메모리를 활용함.

					-	포인터로 동적 생성함.
			
					-	객체생성 함수를 처음 호출할때 객체 생성.

						그후 생성된 메모리를 참고하도록 함.

			
			4)	생성된 메모리는 프로그램 종료시점에 파괴한다.

				-	static으로 선언되어 있으므로 전역으로 관리됨.

				-	해당 객체를 파괴하는 함수를 따로 만들어

					프로그램 종료 시점에 호출함.

*/
//=================================================
#include"SingletonTemplate.h"

class CTest : public CSingletonTemplate<CTest>
{
public:
	void ShowTest()
	{
		cout << "Template Test!!!" << endl;
	}
};


int main()
{
	CTest::GetInst()->ShowTest();

	CTest::GetInst()->Destroy();

	return 0;
}