//=================================================
#include<iostream>
using namespace std;
#pragma warning( disable : 4996 )
//=================================================
//	클래스 (고급)
//	
//	[4 - 5]	오버라이딩.
//=================================================
/* 
	1.	함수 오버라이딩.

		-	부모 클래스에서 선언된 멤버함수를

			자식 클래스에서 재정의.

		-	자식 클래스에서 재정의된 함수는 

			부모 클래스의 동일한 함수를 가린다.

			-	하지만 시야를 달리하면 볼수 있다.

				->	시야 = 포인터 접근.

*/
//=================================================
/*
class CPerson
{
	public :
		void Sleep() { cout << "CPerson Zzz.." << endl; }
};

class CStudent : public CPerson
{
	public:
		void Sleep() { cout << "CStudent Zzz.." << endl; }
		void Study() { cout << "Study!!" << endl; }
};


int main()
{
	CPerson* pPerson = new CPerson;
	CStudent* pStudent = new CStudent;
	
	pPerson->Sleep();
	pStudent->Sleep();	//	부모의 동일한 함수를 가린다.

	CPerson* pPerson2 = pStudent;
	pPerson2->Sleep();

	delete pPerson;
	delete pStudent;
	delete pPerson2;	//	e!!!!!

	return 0;
}
//*/
//=================================================
/*
	2.	virtual	선언.

		-	정의
		
			-	멤버함수를 가상으로 선언하는 것으로써,

				virtual 키워드를 이용하여 동적으로 바인딩.

				-	바인딩

					-	각종 값들이 확정되어 더이상 변경할 수 없는 구속 상태가 되는 것.

				-	동적 바인딩

					-	실행시간( 런타임 )에 바인딩을 실행.

					-	일반적으로 포인터로 주소를 할당하여 작업 하는 경우.

				-	정적 바인딩

					-	컴파일 시간에 바인딩 실행.

		-	 특징

			-	부모 클래스의 포인터로 가리키건 자식의 포인터로 가리키건

				오버라이딩된 자식 클래스의 함수를 호출.

			-	이미 선언된 함수( 오버라이딩 된 함수 )를 존재하지 않는 함수처럼 취급.

			-	가상 함수의 속성은 상속 됨.			
*/
//=================================================
//*

//*/
//=================================================